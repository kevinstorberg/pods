#!/bin/bash

# PODs - AI Development Framework
# Usage: pods <role-name>

set -e  # Exit on error
if [ $# -eq 0 ]; then
    echo "Usage: pods <role-name>"
    exit 1
fi

ROLE_NAME=$1
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
ROLE_FILE="${SCRIPT_DIR}/roles/${ROLE_NAME}.md"

# Validate role exists
if [ ! -f "$ROLE_FILE" ]; then
    echo "Error: Role '$ROLE_NAME' not found."
    echo "Expected file: $ROLE_FILE"
    echo ""
    echo "Available roles:"
    for role_file in "${SCRIPT_DIR}/roles"/*.md; do
        if [ -f "$role_file" ]; then
            role=$(basename "$role_file" .md)
            echo "  $role"
        fi
    done
    exit 1
fi

# Load configuration
CONFIG_FILE="${SCRIPT_DIR}/config/assistants.json"

if [ -f "$CONFIG_FILE" ]; then
    # Parse JSONC config file using Node.js with jsonc-parser
    if command -v node &> /dev/null; then
        # Check if jsonc-parser is installed
        if [ ! -d "${SCRIPT_DIR}/node_modules" ]; then
            echo "Installing dependencies..."
            cd "$SCRIPT_DIR" && npm install > /dev/null 2>&1
        fi

        # Parse JSONC configuration
        CONFIG_RESULT=$(node -e "
            const fs = require('fs');
            const { parse } = require('jsonc-parser');
            try {
                const content = fs.readFileSync('$CONFIG_FILE', 'utf8');
                const config = parse(content);
                const defaultAssistant = config.default || 'claude';
                const roleAssistant = config.roles && config.roles['$ROLE_NAME'] || '';
                console.log(JSON.stringify({default: defaultAssistant, role: roleAssistant}));
            } catch (error) {
                console.log(JSON.stringify({error: error.message}));
            }
        " 2>/dev/null)

        # Parse the result
        if echo "$CONFIG_RESULT" | grep -q '"error"'; then
            echo "Error parsing config file: $CONFIG_FILE"
            exit 1
        fi

        DEFAULT_AI_ASSISTANT=$(echo "$CONFIG_RESULT" | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).default)")
        ROLE_ASSISTANT=$(echo "$CONFIG_RESULT" | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).role)")
    else
        echo "Error: Node.js required to parse JSONC config file"
        echo "Please install Node.js: https://nodejs.org/"
        exit 1
    fi
else
    echo "Error: Config file not found at $CONFIG_FILE"
    echo "Please ensure the config file exists."
    exit 1
fi

# Use role-specific assistant or fall back to default
if [ -n "$ROLE_ASSISTANT" ] && [ "$ROLE_ASSISTANT" != "null" ] && [ "$ROLE_ASSISTANT" != "" ]; then
    AI_EDITOR="$ROLE_ASSISTANT"
    echo "Using role-specific AI assistant: $AI_EDITOR"
else
    AI_EDITOR="$DEFAULT_AI_ASSISTANT"
    echo "Using default AI assistant: $AI_EDITOR"
fi

# Change to the PODs directory so AI has access to all files
cd "$SCRIPT_DIR"

echo "üöÄ Launching $AI_EDITOR with PODs framework..."
echo "üìÅ Working directory: $SCRIPT_DIR"
echo "üë§ Role: $ROLE_NAME"
echo ""

# Create the role assumption command
ROLE_COMMAND="Please read ./roles/${ROLE_NAME}.md and assume that role. Then introduce yourself."

# Launch AI Editor with the role command as an argument
if command -v "$AI_EDITOR" &> /dev/null; then
    case "$AI_EDITOR" in
        "claude")
            # Use Claude Code's task argument feature
            "$AI_EDITOR" "$ROLE_COMMAND"
            ;;
        "gemini")
            # Use Gemini CLI's -i flag for interactive prompt
            "$AI_EDITOR" -i "$ROLE_COMMAND"
            ;;
        *)
            # For unsupported editors, launch normally and show manual instructions
            "$AI_EDITOR"
            echo ""
            echo "‚ö†Ô∏è  Your AI editor doesn't support automatic role loading."
            echo "Please manually enter this command:"
            echo "\"$ROLE_COMMAND\""
            ;;
    esac
else
    echo "Error: $AI_EDITOR command not found."
    echo "Please install $AI_EDITOR or ensure it's in your PATH."
    echo "You can also edit config/pods.conf to use a different AI editor."
    echo ""
    echo "Alternatively, you can manually:"
    echo "1. Start your AI coding tool in this directory: $SCRIPT_DIR"
    echo "2. Ask it to read and assume the role from: ./roles/${ROLE_NAME}.md"
    exit 1
fi